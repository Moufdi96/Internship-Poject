<?xml version="1.0" encoding="UTF-8" ?><ChoregrapheProject xmlns="http://www.aldebaran-robotics.com/schema/choregraphe/project.xsd" xar_version="3"><Box name="root" id="-1" localization="8" tooltip="Root box of Choregraphe&apos;s behavior. Highest level possible." x="0" y="0"><bitmap>media/images/box/root.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Input name="NewAction" type="0" type_size="1" nature="4" stm_value_name="NewAction" inner="1" tooltip="NewAction desc" id="4" /><Input name="FrontTactilTouched" type="0" type_size="1" nature="4" stm_value_name="FrontTactilTouched" inner="1" tooltip="FrontTactilTouched desc" id="5" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="6" /><Timeline enable="0"><BehaviorLayer name="behavior_layer1"><BehaviorKeyframe name="keyframe1" index="1"><Diagram><Box name="AnimamtionMode " id="2" localization="8" tooltip="" x="784" y="187"><bitmap>media/images/box/box-python-script.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.data = ALProxy("ALMemory")
    def onLoad(self):
        self.behaviorName = str()
        self.bm = ALProxy("ALBehaviorManager")

    def onUnload(self):
        if len(self.behaviorName) > 0:
            self.bm.stopBehavior(self.behaviorName)

    def onInput_onStart(self):
        p = "animationMode"
        if len(self.behaviorName) > 0 and self.behaviorName != p:
            raise RuntimeError("this box is already running another behavior")
        try:
            self.behaviorName = p
            self.bm.runBehavior(self.behaviorName)
        finally:
            self.behaviorName = str()

        self.onStopped()


    def onInput_onStop(self):
        self.onUnload()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /></Box><Box name="AnimationMode" id="3" localization="8" tooltip="" x="1022" y="305"><bitmap>media/images/box/box-python-script.png</bitmap><script language="4"><content><![CDATA[import json
from collections import OrderedDict

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.data = ALProxy("ALMotion")
        self.boxActivated = False
        self.i = 0
        self.jsonData = {}
        self.j = OrderedDict()

        print("°°°°°°°°°°°°°°°°°°°°Init°°°°°°°°°°°°°°°°°°°°°")

    def getJointsValues(self,movementName):
        self.i = self.i+1

        self.jsonData[movementName] = self.j
        jointsData ={"HeadYaw":0.0,"HeadPitch":0.0, "LShoulderPitch":0.0,"LShoulderRoll":0.0,"RShoulderPitch":0.0,"RShoulderRoll":0.0,"LElbowYaw":0.0,"LElbowRoll":0.0,"RElbowYaw":0.0,"RElbowRoll":0.0,"LWristYaw":0.0,"RWristYaw":0.0,"LHand":0.0,"RHand":0.0,"HipPitch":0.0,"HipRoll":0.0,"KneePitch":0.0}

        self.jsonData[movementName][str(self.i)] = jointsData

        self.jsonData[movementName][str(self.i)]["HeadYaw"] = self.data.getAngles("HeadYaw",False)[0]

        self.jsonData[movementName][str(self.i)]["HeadPitch"] = self.data.getAngles("HeadPitch",False)[0]

        self.jsonData[movementName][str(self.i)]["LShoulderPitch"] = self.data.getAngles("LShoulderPitch",False)[0]
        self.jsonData[movementName][str(self.i)]["LShoulderRoll"] = self.data.getAngles("LShoulderRoll",False)[0]

        self.jsonData[movementName][str(self.i)]["RShoulderPitch"] = self.data.getAngles("RShoulderPitch",False)[0]
        self.jsonData[movementName][str(self.i)]["RShoulderRoll"] = self.data.getAngles("RShoulderRoll",False)[0]

        self.jsonData[movementName][str(self.i)]["LElbowYaw"] = self.data.getAngles("LElbowYaw",False)[0]

        self.jsonData[movementName][str(self.i)]["LElbowRoll"] = self.data.getAngles("LElbowRoll",False)[0]

        self.jsonData[movementName][str(self.i)]["RElbowYaw"] = self.data.getAngles("RElbowYaw",False)[0]

        self.jsonData[movementName][str(self.i)]["RElbowRoll"] = self.data.getAngles("RElbowRoll",False)[0]

        self.jsonData[movementName][str(self.i)]["LWristYaw"] = self.data.getAngles("LWristYaw",False)[0]

        self.jsonData[movementName][str(self.i)]["RWristYaw"] = self.data.getAngles("RWristYaw",False)[0]

        self.jsonData[movementName][str(self.i)]["LHand"]  =self.data.getAngles("LHand",False)[0]

        self.jsonData[movementName][str(self.i)]["RHand"]  =self.data.getAngles("RHand",False)[0]

        self.jsonData[movementName][str(self.i)]["HipPitch"]  =self.data.getAngles("HipPitch",False)[0]

        self.jsonData[movementName][str(self.i)]["HipRoll"]  =self.data.getAngles("HipRoll",False)[0]

        self.jsonData[movementName][str(self.i)]["KneePitch"]  =self.data.getAngles("KneePitch",False)[0]

#        self.jsonData["JointValues"][str(self.i)]["RLHipRoll"]  =self.data.getAngles("RLHipRoll",False)[0]

#        self.jsonData["JointValues"][str(self.i)]["LKneePitch"]  =self.data.getAngles("LKneePitch",False)[0]

#        self.jsonData["JointValues"][str(self.i)]["RKneePitch"]  =self.data.getAngles("RKneePitch",False)[0]

        with open("/home/nao/vs.json","w+")as df:
            json.dump(self.jsonData,df)

    def onLoad(self):
        self.boxActivated = True
        #put initialization code here
        pass

    def onUnload(self):
        pass

    def onInput_onStart(self):
        movementName = self.getParameter("movementName")
        try:
            with open("/home/nao/vs.json","rw+")as df:
                self.jsonData = json.load(df)
                print(self.jsonData)
#                if movementName in self.jsonData :
#                    print("---------------------------------------------------------------------------------------------------------------------------------------------------------------")
#                    print("this movement name already exist, please set the box parameter with another name")
        except:
            print("file does not exist")
        print("---------------------------------")
        print(movementName)
        self.getJointsValues(movementName)

    def onInput_onStop(self):
        pass

        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="1" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Parameter name="movementName" inherits_from_parent="0" content_type="3" value="movement 1" default_value="" custom_choice="0" tooltip="" id="5" /></Box><Box name="UpFrontDetection" id="6" localization="8" tooltip="" x="357" y="323"><bitmap>media/images/box/box-python-script.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self, p):
        #self.onStopped() #activate the output of the box
        if p==1 :
            self.onStopped()

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="2" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /></Box><Box name="TCPServer" id="1" localization="8" tooltip="" x="574" y="50"><bitmap>media/images/box/box-python-script.png</bitmap><script language="4"><content><![CDATA[
import socket

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.memProx = ALProxy('ALMemory')
        self.memProx.declareEvent("NewAction")
        self.hote = ''
        self.port = 1234


    def onLoad(self):
        #put initialization code here
        self.connexion_principale = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        self.connexion_principale.bind((self.hote, self.port))
        self.connexion_principale.listen(5)
        print("Le serveur écoute à présent sur le port {}".format(self.port))

    def onUnload(self):
        #put clean-up code here
        self.connexion_principale.close()

    def onInput_onStart(self):
        #self.onStopped() #activate the output of the box
        self.connexion_avec_client, self.infos_connexion = self.connexion_principale.accept()

        msg_recu = b""
        msg_recu = self.connexion_avec_client.recv(1024)
        while (msg_recu != b"fin" and msg_recu != b"fin\n"):
            print(msg_recu.decode())
            self.memProx.raiseEvent("NewAction",msg_recu)
            self.connexion_avec_client.send(b"5 / 5")
            msg_recu = self.connexion_avec_client.recv(1024)

        print("Fermeture de la connexion")
        self.connexion_avec_client.close()
        self.onStopped()

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /></Box><Box name="Set Speech Lang." id="4" localization="8" tooltip="Select the language you would like the robot to speak. Any following call to&#x0A;ALTextToSpeech (Say box for instance) will use this language." x="348" y="48"><bitmap>media/images/box/interaction/say.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.tts = ALProxy("ALTextToSpeech")

    def onInput_onSet(self):
        self.tts.setLanguage( self.getParameter("Language") )
        self.onReady()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onSet" type="1" type_size="1" nature="1" inner="0" tooltip="The data is set when a signal is received on this input." id="2" /><Output name="onReady" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when the data has been set." id="3" /><Parameter name="Language" inherits_from_parent="0" content_type="3" value="English" default_value="English" custom_choice="1" tooltip="Set the language the robot speaks." id="4"><Choice value="Arabic" /><Choice value="Brazilian" /><Choice value="Chinese" /><Choice value="Czech" /><Choice value="Danish" /><Choice value="Dutch" /><Choice value="English" /><Choice value="Finnish" /><Choice value="French" /><Choice value="German" /><Choice value="Greek" /><Choice value="Italian" /><Choice value="Japanese" /><Choice value="Korean" /><Choice value="MandarinTaiwan" /><Choice value="Norwegian" /><Choice value="Polish" /><Choice value="Portuguese" /><Choice value="Russian" /><Choice value="Spanish" /><Choice value="Swedish" /><Choice value="Turkish" /></Parameter><Resource name="Speech" type="Lock" timeout="0" /></Box><Box name="MySay" id="5" localization="8" tooltip="" x="350" y="181"><bitmap>media/images/box/box-python-script.png</bitmap><script language="4"><content><![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.tts = ALProxy('ALTextToSpeech')
        self.ttsStop = ALProxy('ALTextToSpeech', True) #Create another proxy as wait is blocking if audioout is remote

    def onLoad(self):
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self,p):
        self.bIsRunning = True
        if(p=='Create Movement'):
            self.create()
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += p
            sentence +=  "\RST\ "
            id = self.tts.post.say(str(sentence))
            self.ids.append(id)
            self.tts.wait(id, 0)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Output name="create" type="1" type_size="1" nature="2" inner="0" tooltip="" id="5" /><Parameter name="Speed (%)" inherits_from_parent="0" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="" id="6" /><Parameter name="Voice shaping (%)" inherits_from_parent="0" content_type="1" value="100" default_value="100" min="50" max="150" tooltip="" id="7" /></Box><Box name="Wait For Signals" id="7" localization="8" tooltip="Wait for both inputs to be stimulated before stimulating its output." x="787" y="307"><bitmap>media/images/box/wait.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.ok = [False]*2

    def onUnload(self):
        #puts code for box cleanup here
        ""

    def onStart(self, nInput):
        self.ok[nInput-1] = True
        bOutput = True
        for bOk in self.ok:
            bOutput = bOutput and bOk
        if( bOutput ):
            self.ok = [False]*2
            self.signalsReceived()

    def onInput_signal1(self):
        self.onStart(1)

    def onInput_signal2(self):
        self.onStart(2)]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" /><Input name="signal1" type="1" type_size="1" nature="1" inner="0" tooltip="First signal to wait." id="2" /><Input name="signal2" type="1" type_size="1" nature="1" inner="0" tooltip="Second signal to wait." id="3" /><Output name="signalsReceived" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when both inputs have been stimulated." id="4" /></Box><Box name="Say" id="8" localization="8" tooltip="Say some text. The text can be localized." x="1021" y="191"><bitmap>media/images/box/interaction/say.png</bitmap><script language="4"><content><![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.tts = ALProxy('ALTextToSpeech')
        self.ttsStop = ALProxy('ALTextToSpeech', True) #Create another proxy as wait is blocking if audioout is remote

    def onLoad(self):
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += self.getParameter("Text")
            sentence +=  "\RST\ "
            id = self.tts.post.say(str(sentence))
            self.ids.append(id)
            self.tts.wait(id, 0)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped('movement 1') # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" /><Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" /><Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" /><Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" /><Parameter name="Text" inherits_from_parent="0" content_type="5" value="Ok I will try to reproduce it" default_value="" tooltip="The text you want to say. Don&apos;t forget to translate it!" id="7" /></Box><Box name="mySetPosture" id="9" localization="8" tooltip="" x="1252" y="191"><bitmap>media/images/box/box-python-script.png</bitmap><script language="4"><content><![CDATA[import json
import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.alMotionProx = ALProxy('ALMotion')
        self.alPostureProx = ALProxy('ALRobotPosture')

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self, p):
        self.myValuesDict = {}

        with open('/home/nao/vs.json') as jointsValues :
            self.myValuesDict = json.load(jointsValues)

        self.alPostureProx.goToPosture('Stand',0.1)

        for posture in self.myValuesDict[p]:
            for joint in self.myValuesDict [p] [posture]:
                self.alMotionProx.setAngles(str(joint),self.myValuesDict[p][posture][joint],0.1 )
            time.sleep(1.5)
        print(self.myValuesDict)

        self.onStopped()
    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /></Box><Link inputowner="1" indexofinput="2" outputowner="4" indexofoutput="3" /><Link inputowner="4" indexofinput="2" outputowner="0" indexofoutput="2" /><Link inputowner="0" indexofinput="6" outputowner="1" indexofoutput="4" /><Link inputowner="5" indexofinput="2" outputowner="0" indexofoutput="4" /><Link inputowner="2" indexofinput="2" outputowner="5" indexofoutput="5" /><Link inputowner="7" indexofinput="2" outputowner="5" indexofoutput="5" /><Link inputowner="7" indexofinput="3" outputowner="6" indexofoutput="4" /><Link inputowner="6" indexofinput="2" outputowner="0" indexofoutput="5" /><Link inputowner="8" indexofinput="2" outputowner="2" indexofoutput="4" /><Link inputowner="9" indexofinput="2" outputowner="8" indexofoutput="4" /><Link inputowner="3" indexofinput="2" outputowner="7" indexofoutput="4" /><Link inputowner="7" indexofinput="2" outputowner="7" indexofoutput="4" /></Diagram></BehaviorKeyframe></BehaviorLayer></Timeline></Box></ChoregrapheProject>