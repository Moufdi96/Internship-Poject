<?xml version="1.0" encoding="UTF-8" ?><ChoregrapheProject xmlns="http://www.aldebaran-robotics.com/schema/choregraphe/project.xsd" xar_version="3"><Box name="root" id="-1" localization="8" tooltip="Root box of Choregraphe&apos;s behavior. Highest level possible." x="0" y="0"><bitmap>media/images/box/root.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Input name="logout" type="0" type_size="1" nature="4" stm_value_name="logout" inner="1" tooltip="logout desc" id="4" /><Input name="login" type="0" type_size="1" nature="4" stm_value_name="login" inner="1" tooltip="login desc" id="5" /><Input name="ACTIVATE_ANIMATION_MODE" type="0" type_size="1" nature="4" stm_value_name="ACTIVATE_ANIMATION_MODE" inner="1" tooltip="ACTIVATE_ANIMATION_MODE desc" id="6" /><Input name="RightBumperPressed" type="0" type_size="1" nature="4" stm_value_name="RightBumperPressed" inner="1" tooltip="RightBumperPressed desc" id="7" /><Input name="DEACTIVATE_ANIMATION_MODE" type="0" type_size="1" nature="4" stm_value_name="DEACTIVATE_ANIMATION_MODE" inner="1" tooltip="DEACTIVATE_ANIMATION_MODE desc" id="8" /><Input name="SAVE_MOVEMENT" type="0" type_size="1" nature="4" stm_value_name="SAVE_MOVEMENT" inner="1" tooltip="SAVE_MOVEMENT desc" id="9" /><Input name="PLAY_MOVEMENT" type="0" type_size="1" nature="4" stm_value_name="PLAY_MOVEMENT" inner="1" tooltip="PLAY_MOVEMENT desc" id="10" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="11" /><Timeline enable="0"><BehaviorLayer name="behavior_layer1"><BehaviorKeyframe name="keyframe1" index="1"><Diagram><Box name="AnimamtionMode " id="2" localization="8" tooltip="" x="728" y="322"><bitmap>media/images/box/box-python-script.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.data = ALProxy("ALMemory")
    def onLoad(self):
        self.behaviorName = str()
        self.bm = ALProxy("ALBehaviorManager")

    def onUnload(self):
        if len(self.behaviorName) > 0:
            self.bm.stopBehavior(self.behaviorName)

    def onInput_onStart(self):
        p = "animationMode"
        if len(self.behaviorName) > 0 and self.behaviorName != p:
            raise RuntimeError("this box is already running another behavior")
        try:
            self.behaviorName = p
            self.bm.runBehavior(self.behaviorName)
        finally:
            self.behaviorName = str()

        self.onStopped()


    def onInput_onStop(self):
        self.onUnload()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /></Box><Box name="AnimationMode" id="3" localization="8" tooltip="" x="1082" y="757"><bitmap>media/images/box/box-python-script.png</bitmap><script language="4"><content><![CDATA[import json
from collections import OrderedDict

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.data = ALProxy("ALMotion")
        self.bm = ALProxy("ALBehaviorManager")
        self.boxActivated = False
        self.i = 0
        self.jsonData = {}
        self.j = OrderedDict()

        print("°°°°°°°°°°°°°°°°°°°°Init°°°°°°°°°°°°°°°°°°°°°")

    def getJointsValues(self,movementID):
        self.i = self.i+1

        self.jsonData[movementID] = self.j
        jointsData ={"HeadYaw":0.0,"HeadPitch":0.0, "LShoulderPitch":0.0,"LShoulderRoll":0.0,"RShoulderPitch":0.0,"RShoulderRoll":0.0,"LElbowYaw":0.0,"LElbowRoll":0.0,"RElbowYaw":0.0,"RElbowRoll":0.0,"LWristYaw":0.0,"RWristYaw":0.0,"LHand":0.0,"RHand":0.0,"HipPitch":0.0,"HipRoll":0.0,"KneePitch":0.0}

        self.jsonData[movementID][str(self.i)] = jointsData

        self.jsonData[movementID][str(self.i)]["HeadYaw"] = self.data.getAngles("HeadYaw",False)[0]

        self.jsonData[movementID][str(self.i)]["HeadPitch"] = self.data.getAngles("HeadPitch",False)[0]

        self.jsonData[movementID][str(self.i)]["LShoulderPitch"] = self.data.getAngles("LShoulderPitch",False)[0]
        self.jsonData[movementID][str(self.i)]["LShoulderRoll"] = self.data.getAngles("LShoulderRoll",False)[0]

        self.jsonData[movementID][str(self.i)]["RShoulderPitch"] = self.data.getAngles("RShoulderPitch",False)[0]
        self.jsonData[movementID][str(self.i)]["RShoulderRoll"] = self.data.getAngles("RShoulderRoll",False)[0]

        self.jsonData[movementID][str(self.i)]["LElbowYaw"] = self.data.getAngles("LElbowYaw",False)[0]

        self.jsonData[movementID][str(self.i)]["LElbowRoll"] = self.data.getAngles("LElbowRoll",False)[0]

        self.jsonData[movementID][str(self.i)]["RElbowYaw"] = self.data.getAngles("RElbowYaw",False)[0]

        self.jsonData[movementID][str(self.i)]["RElbowRoll"] = self.data.getAngles("RElbowRoll",False)[0]

        self.jsonData[movementID][str(self.i)]["LWristYaw"] = self.data.getAngles("LWristYaw",False)[0]

        self.jsonData[movementID][str(self.i)]["RWristYaw"] = self.data.getAngles("RWristYaw",False)[0]

        self.jsonData[movementID][str(self.i)]["LHand"]  =self.data.getAngles("LHand",False)[0]

        self.jsonData[movementID][str(self.i)]["RHand"]  =self.data.getAngles("RHand",False)[0]

        self.jsonData[movementID][str(self.i)]["HipPitch"]  =self.data.getAngles("HipPitch",False)[0]

        self.jsonData[movementID][str(self.i)]["HipRoll"]  =self.data.getAngles("HipRoll",False)[0]

        self.jsonData[movementID][str(self.i)]["KneePitch"]  =self.data.getAngles("KneePitch",False)[0]

#        self.jsonData["JointValues"][str(self.i)]["RLHipRoll"]  =self.data.getAngles("RLHipRoll",False)[0]

#        self.jsonData["JointValues"][str(self.i)]["LKneePitch"]  =self.data.getAngles("LKneePitch",False)[0]

#        self.jsonData["JointValues"][str(self.i)]["RKneePitch"]  =self.data.getAngles("RKneePitch",False)[0]

        with open("/home/nao/vs.json","w+")as df:
            json.dump(self.jsonData,df)

    def onLoad(self):
        self.boxActivated = True
        #put initialization code here
        pass

    def onUnload(self):
        pass

    def onInput_onStart(self):
        try:
            with open("/home/nao/vs.json","rw+")as df:
                self.jsonData = json.load(df)
                print(self.jsonData)

        except:
            print("file does not exist")
        print("---------------------------------")
        print(len(self.jsonData))
        self.getJointsValues("mvt_"+str(len(self.jsonData)))

    def onInput_onStop(self):
        self.bm.stopBehavior("animationMode")
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="1" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /></Box><Box name="UpFrontDetection" id="6" localization="8" tooltip="" x="360" y="480"><bitmap>media/images/box/box-python-script.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self, p):
        #self.onStopped() #activate the output of the box
        if p==1 :
            self.onStopped()

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="2" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /></Box><Box name="Set Speech Lang." id="4" localization="8" tooltip="Select the language you would like the robot to speak. Any following call to&#x0A;ALTextToSpeech (Say box for instance) will use this language." x="191" y="23"><bitmap>media/images/box/interaction/say.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.tts = ALProxy("ALTextToSpeech")

    def onInput_onSet(self):
        self.tts.setLanguage( self.getParameter("Language") )
        self.onReady()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onSet" type="1" type_size="1" nature="1" inner="0" tooltip="The data is set when a signal is received on this input." id="2" /><Output name="onReady" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when the data has been set." id="3" /><Parameter name="Language" inherits_from_parent="0" content_type="3" value="English" default_value="English" custom_choice="1" tooltip="Set the language the robot speaks." id="4"><Choice value="Arabic" /><Choice value="Brazilian" /><Choice value="Chinese" /><Choice value="Czech" /><Choice value="Danish" /><Choice value="Dutch" /><Choice value="English" /><Choice value="Finnish" /><Choice value="French" /><Choice value="German" /><Choice value="Greek" /><Choice value="Italian" /><Choice value="Japanese" /><Choice value="Korean" /><Choice value="MandarinTaiwan" /><Choice value="Norwegian" /><Choice value="Polish" /><Choice value="Portuguese" /><Choice value="Russian" /><Choice value="Spanish" /><Choice value="Swedish" /><Choice value="Turkish" /></Parameter><Resource name="Speech" type="Lock" timeout="0" /></Box><Box name="MySay" id="5" localization="8" tooltip="" x="348" y="313"><bitmap>media/images/box/box-python-script.png</bitmap><script language="4"><content><![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.bm = ALProxy("ALBehaviorManager")
        self.tts = ALProxy('ALTextToSpeech')
        self.ttsStop = ALProxy('ALTextToSpeech', True) #Create another proxy as wait is blocking if audioout is remote

    def onLoad(self):
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self,p):
        self.bm.stopBehavior("animationMode")
        self.bIsRunning = True

        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += p
            sentence +=  "\RST\ "
            id = self.tts.post.say(str(sentence))
            self.ids.append(id)
            self.tts.wait(id, 0)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()
        self.onStopped()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Parameter name="Speed (%)" inherits_from_parent="0" content_type="1" value="87" default_value="100" min="50" max="200" tooltip="" id="5" /><Parameter name="Voice shaping (%)" inherits_from_parent="0" content_type="1" value="100" default_value="100" min="50" max="150" tooltip="" id="6" /></Box><Box name="Wait For Signals" id="7" localization="8" tooltip="Wait for both inputs to be stimulated before stimulating its output." x="783" y="680"><bitmap>media/images/box/wait.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.ok = [False]*2

    def onUnload(self):
        #puts code for box cleanup here
        ""

    def onStart(self, nInput):
        self.ok[nInput-1] = True
        bOutput = True
        for bOk in self.ok:
            bOutput = bOutput and bOk
        if( bOutput ):
            self.ok = [False]*2
            self.signalsReceived()

    def onInput_signal1(self):
        self.onStart(1)

    def onInput_signal2(self):
        self.onStart(2)]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" /><Input name="signal1" type="1" type_size="1" nature="1" inner="0" tooltip="First signal to wait." id="2" /><Input name="signal2" type="1" type_size="1" nature="1" inner="0" tooltip="Second signal to wait." id="3" /><Output name="signalsReceived" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when both inputs have been stimulated." id="4" /></Box><Box name="mySetPosture" id="9" localization="8" tooltip="" x="1091" y="956"><bitmap>media/images/box/box-python-script.png</bitmap><script language="4"><content><![CDATA[import json
import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.alMotionProx = ALProxy('ALMotion')
        self.alPostureProx = ALProxy('ALRobotPosture')


    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self, p):
        self.myValuesDict = {}

        with open('/home/nao/vs.json') as jointsValues :
            self.myValuesDict = json.load(jointsValues)

        self.alPostureProx.goToPosture('Stand',0.05)
        time.sleep(1)
        for posture in self.myValuesDict[p]:
            for joint in self.myValuesDict [p] [posture]:
                self.alMotionProx.setAngles(str(joint),self.myValuesDict[p][posture][joint],0.05 )
            time.sleep(1.5)
        print(self.myValuesDict)

        self.onStopped()
    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /></Box><Box name="FTPServer" id="10" localization="8" tooltip="" x="663" y="24"><bitmap>media/images/box/box-python-script.png</bitmap><script language="4"><content><![CDATA[
memProx = ALProxy('ALMemory')
memProx.declareEvent("login")
memProx.declareEvent("logout")
memProx.declareEvent("ACTIVATE_ANIMATION_MODE")
memProx.declareEvent("DEACTIVATE_ANIMATION_MODE")
memProx.declareEvent("SAVE_MOVEMENT")
memProx.declareEvent("PLAY_MOVEMENT")

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.hote ='192.168.178.21'
        self.port = 9562


    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        #self.onStopped() #activate the output of the box
        from pyftpdlib.authorizers import DummyAuthorizer
        from pyftpdlib.handlers import FTPHandler
        from pyftpdlib.servers import FTPServer

        class MyHandler(FTPHandler):
            def on_login(self, username):
                memProx.raiseEvent("login","Hello !, my name is Max, I am connected to your phone, and I am ready to do what ever you ask !")
                memProx.raiseEvent("ANIMATION","animation mode")

            def on_logout(self, username):
                memProx.raiseEvent("logout","your phone has logged out")

            def on_disconnect(self):
                memProx.raiseEvent("logout","your phone has logged out")

            def ftp_ACTIVATE_ANIMATION_MODE(self,line):
                memProx.raiseEvent("ACTIVATE_ANIMATION_MODE","Animation mode is on, you are free two teach the new movements")
                self.respond("200 Animation mode is on")

            def ftp_DEACTIVATE_ANIMATION_MODE(self,line):
                memProx.raiseEvent("DEACTIVATE_ANIMATION_MODE","Animation mode is off, ok I learnt the movement, now you can hit the save button")
                self.respond("200 Animation mode is off")

            def ftp_SAVE(self,line):
                memProx.raiseEvent("SAVE_MOVEMENT","Movement successfully saved !")
                self.respond("200 Movement saved")

            def ftp_PLAY_MOVEMENT(self,line):
                self.respond("200 Movement started")
                print("____________")
                print(line)
                memProx.raiseEvent("PLAY_MOVEMENT",line)




        self.authorizer = DummyAuthorizer()
        self.authorizer.add_user("nao", "pepper", "/", perm="elradfmw")
        self.handler = MyHandler
        self.handler.authorizer = self.authorizer
        self.server = FTPServer((self.hote, self.port), self.handler)
        #if(FTPHandler.commandFromServer == "ACTIVATE_ANIMATION_MODE"):
         #   memProx.raiseEvent("NewAction","ACTIVATE_ANIMATION_MODE")


        print("__________________")
        self.server.serve_forever()

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /></Box><Box name="Get Attached File" id="11" localization="8" tooltip="Use this box to choose an attached file in its parameters. The filename will be sent on&#x0A;the output when the input is stimulated." x="376" y="15"><bitmap>media/images/box/folder.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.framemanager = ALProxy("ALFrameManager")
        self.folderName = None


    def onInput_onStart(self):
        self.folderName = self.framemanager.getBehaviorPath(self.behaviorId)+ self.getParameter("File name")
        import sys
        if self.folderName not in sys.path:
            sys.path.insert(0, self.folderName)
        self.onStopped()

    def onUnload(self):
        import sys
        if self.folderName and self.folderName in sys.path:
            sys.path.remove(self.folderName)]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="To send the filepath on the output." id="2" /><Output name="onStopped" type="1" type_size="1" nature="2" inner="0" tooltip="The filepath of the selected resource file." id="3" /><Parameter name="File name" inherits_from_parent="1" content_type="4" value="/.." default_value="" tooltip="Name of the file which is going to be sent on the box output.&#x0A;&#x0A;Note: You can click on the folder icon to browse the project content or import&#x0A;new files to the project." id="4" /></Box><Box name="MySay (1)" id="1" localization="8" tooltip="" x="349" y="176"><bitmap>media/images/box/box-python-script.png</bitmap><script language="4"><content><![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.tts = ALProxy('ALTextToSpeech')
        self.ttsStop = ALProxy('ALTextToSpeech', True) #Create another proxy as wait is blocking if audioout is remote

    def onLoad(self):
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self,p):
        self.bIsRunning = True

        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += p
            sentence +=  "\RST\ "
            id = self.tts.post.say(str(sentence))
            self.ids.append(id)
            self.tts.wait(id, 0)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Parameter name="Speed (%)" inherits_from_parent="0" content_type="1" value="87" default_value="100" min="50" max="200" tooltip="" id="5" /><Parameter name="Voice shaping (%)" inherits_from_parent="0" content_type="1" value="100" default_value="100" min="50" max="150" tooltip="" id="6" /></Box><Box name="MySay (2)" id="12" localization="8" tooltip="" x="361" y="791"><bitmap>media/images/box/box-python-script.png</bitmap><script language="4"><content><![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.tts = ALProxy('ALTextToSpeech')
        self.ttsStop = ALProxy('ALTextToSpeech', True) #Create another proxy as wait is blocking if audioout is remote

    def onLoad(self):
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self,p):
        self.bIsRunning = True

        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += p
            sentence +=  "\RST\ "
            id = self.tts.post.say(str(sentence))
            self.ids.append(id)
            self.tts.wait(id, 0)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Parameter name="Speed (%)" inherits_from_parent="0" content_type="1" value="87" default_value="100" min="50" max="200" tooltip="" id="5" /><Parameter name="Voice shaping (%)" inherits_from_parent="0" content_type="1" value="100" default_value="100" min="50" max="150" tooltip="" id="6" /></Box><Box name="MySay (3)" id="13" localization="8" tooltip="" x="356" y="643"><bitmap>media/images/box/box-python-script.png</bitmap><script language="4"><content><![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.tts = ALProxy('ALTextToSpeech')
        self.ttsStop = ALProxy('ALTextToSpeech', True) #Create another proxy as wait is blocking if audioout is remote

    def onLoad(self):
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self,p):
        self.bIsRunning = True

        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += p
            sentence +=  "\RST\ "
            id = self.tts.post.say(str(sentence))
            self.ids.append(id)
            self.tts.wait(id, 0)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Parameter name="Speed (%)" inherits_from_parent="0" content_type="1" value="87" default_value="100" min="50" max="200" tooltip="" id="5" /><Parameter name="Voice shaping (%)" inherits_from_parent="0" content_type="1" value="100" default_value="100" min="50" max="150" tooltip="" id="6" /></Box><Box name="MySay (4)" id="8" localization="8" tooltip="" x="385" y="952"><bitmap>media/images/box/box-python-script.png</bitmap><script language="4"><content><![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.tts = ALProxy('ALTextToSpeech')
        self.ttsStop = ALProxy('ALTextToSpeech', True) #Create another proxy as wait is blocking if audioout is remote

    def onLoad(self):
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self,p):
        self.bIsRunning = True
        self.mvtID = p

        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence +=  "\RST\ "
            id = self.tts.post.say("Ok watch me !")
            self.ids.append(id)
            self.tts.wait(id, 0)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped(self.mvtID) # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Parameter name="Speed (%)" inherits_from_parent="0" content_type="1" value="87" default_value="100" min="50" max="200" tooltip="" id="5" /><Parameter name="Voice shaping (%)" inherits_from_parent="0" content_type="1" value="100" default_value="100" min="50" max="150" tooltip="" id="6" /></Box><Link inputowner="7" indexofinput="2" outputowner="7" indexofoutput="4" /><Link inputowner="10" indexofinput="2" outputowner="11" indexofoutput="3" /><Link inputowner="4" indexofinput="2" outputowner="0" indexofoutput="2" /><Link inputowner="11" indexofinput="2" outputowner="4" indexofoutput="3" /><Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="4" /><Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="5" /><Link inputowner="3" indexofinput="2" outputowner="7" indexofoutput="4" /><Link inputowner="7" indexofinput="3" outputowner="6" indexofoutput="4" /><Link inputowner="2" indexofinput="2" outputowner="5" indexofoutput="4" /><Link inputowner="7" indexofinput="2" outputowner="5" indexofoutput="4" /><Link inputowner="3" indexofinput="3" outputowner="12" indexofoutput="4" /><Link inputowner="6" indexofinput="2" outputowner="0" indexofoutput="7" /><Link inputowner="5" indexofinput="2" outputowner="0" indexofoutput="6" /><Link inputowner="13" indexofinput="2" outputowner="0" indexofoutput="8" /><Link inputowner="12" indexofinput="2" outputowner="0" indexofoutput="9" /><Link inputowner="8" indexofinput="2" outputowner="0" indexofoutput="10" /><Link inputowner="9" indexofinput="2" outputowner="8" indexofoutput="4" /></Diagram></BehaviorKeyframe></BehaviorLayer></Timeline></Box></ChoregrapheProject>